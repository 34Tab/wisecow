name: Continuous Deployment
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and test Docker image
      run: |
        docker build -t wisecow:latest .
        docker run wisecow:latest

    - name: Tag and push image to Amazon ECR
      env:
        ECR_REGISTRY: 490004613642.dkr.ecr.ap-south-1.amazonaws.com
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker tag wisecow:latest $ECR_REGISTRY/wisecow:$IMAGE_TAG
        docker tag wisecow:latest $ECR_REGISTRY/wisecow:latest
        docker push $ECR_REGISTRY/wisecow:$IMAGE_TAG
        docker push $ECR_REGISTRY/wisecow:latest

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update kube config
      run: |
        aws eks update-kubeconfig --name your-cluster-name --region ap-south-1
        
    - name: Deploy to Kubernetes
      env:
        IMAGE_TAG: ${{ github.sha }}
        ECR_REGISTRY: 490004613642.dkr.ecr.ap-south-1.amazonaws.com
      run: |
        # Create a temporary deployment file with the current image tag
        cat <<EOF > deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: wisecow
          labels:
            app: wisecow
        spec:
          replicas: 2
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 0
          selector:
            matchLabels:
              app: wisecow
          template:
            metadata:
              labels:
                app: wisecow
            spec:
              containers:
              - name: wisecow
                image: ${ECR_REGISTRY}/wisecow:${IMAGE_TAG}
                imagePullPolicy: Always
                ports:
                - containerPort: 80
                resources:
                  requests:
                    cpu: "100m"
                    memory: "128Mi"
                  limits:
                    cpu: "200m"
                    memory: "256Mi"
                readinessProbe:
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  timeoutSeconds: 2
                  successThreshold: 1
                  failureThreshold: 3
                livenessProbe:
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 15
                  periodSeconds: 20
              terminationGracePeriodSeconds: 30
        EOF
        
        # Apply the deployment
        kubectl apply -f deployment.yaml
        
        # Wait for rollout to complete with increased timeout
        kubectl rollout status deployment/wisecow --timeout=600s

    - name: Debug deployment if failed
      if: failure()
      run: |
        echo "Checking deployment status..."
        kubectl describe deployment wisecow
        
        echo "\nChecking pod status..."
        kubectl get pods -l app=wisecow -o wide
        
        echo "\nChecking pod logs..."
        for pod in $(kubectl get pods -l app=wisecow -o name); do
          echo "\nLogs for $pod:"
          kubectl logs $pod --all-containers --tail=100
        done
        
        echo "\nChecking pod events..."
        for pod in $(kubectl get pods -l app=wisecow -o name); do
          echo "\nEvents for $pod:"
          kubectl describe $pod | grep -A 20 Events:
        done

    - name: Verify deployment
      run: |
        kubectl get pods -l app=wisecow -o wide
        kubectl get deployment wisecow -o wide
