name: Continuous Deployment to Kubernetes

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Set your region here

      # Step 3: Log in to Amazon ECR
      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 490004613642.dkr.ecr.ap-south-1.amazonaws.com

      # Step 4: Build and Push Docker Image to Amazon ECR
      - name: Build and Push Docker Image
        run: |
          docker build -t 490004613642.dkr.ecr.ap-south-1.amazonaws.com/wisecow:${{ github.sha }} .
          docker push 490004613642.dkr.ecr.ap-south-1.amazonaws.com/wisecow:${{ github.sha }}

      # Step 5: Set up Kubernetes config (KUBECONFIG)
      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube  # Create the .kube directory if it doesn't exist
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > ~/.kube/config
          chmod 600 ~/.kube/config  # Ensure proper permissions for the config file

      # Step 6: Update Deployment to use the new image
      - name: Update Kubernetes Deployment with New Image
        run: |
          kubectl set image deployment/wisecow wisecow=490004613642.dkr.ecr.ap-south-1.amazonaws.com/wisecow:${{ github.sha }}
          
          # Step 7: Ensure rollout finishes successfully
          kubectl rollout status deployment/wisecow --timeout=600s  # 10 minute timeout

          # If rollout is still pending, restart the deployment
          kubectl rollout restart deployment/wisecow
